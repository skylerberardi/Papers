from ftplib import FTP
import gzip
import re
import sys
import copy
import os
import subprocess
import math
import statistics
import random
from scipy.stats import hypergeom
from scipy.stats import kstest
from scipy.stats import ks_2samp
from sympy import symbols
from sympy.solvers import solve
import numpy as np

chroms = ["2L","2R","3L","3R","X"]

pooledsampsID = ["PA_li_09_spring","PA_li_09_fall","PA_li_10_spring","PA_li_10_fall","PA_li_11_spring","PA_li_11_fall","PA_li_12_spring","PA_li_12_fall","PA_li_14_spring","PA_li_14_fall","PA_li_15_spring","PA_li_15_fall"]
pooledsampsdict = {"PA_li_09_spring":[9,"spring",2009.0],"PA_li_09_fall":[9,"fall",2009.5],"PA_li_10_spring":[10,"spring",2010.0],"PA_li_10_fall":[10,"fall",2010.5],"PA_li_11_spring":[11,"spring",2011.0],"PA_li_11_fall":[11,"fall",2011.5],"PA_li_12_spring":[12,"spring",2012.0],"PA_li_12_fall":[12,"fall",2012.5],"PA_li_14_spring":[14,"spring",2014.0],"PA_li_14_fall":[14,"fall",2014.5],"PA_li_15_spring":[15,"spring",2015.0],"PA_li_15_fall":[15,"fall",2015.5]}

chrom = sys.argv[1]

mapfile = "Schroeder.Dmel_r5-to-r6_map.2014.6.12.txt"
mapswap = []

with open(mapfile) as file:
	for line in file:
		if line.startswith("#"):
			continue
		else:
			l = line.strip("\n").split("\t")
			if l[0] in chroms:
				mapswap.append([l[0],int(l[1]),int(l[2]),l[3],int(l[4]),int(l[5]),l[6]])

def R5toR6(poschrom,maplist):
	pos = poschrom[1]
	chrom = poschrom[0]
	newchrom = ""

	for i in maplist:
		if i[0]==chrom:
			if pos>=i[1] and pos<=i[2]:
				newchrom = i[3]
				start = i[1]
				end = i[2]
				newstart = i[4]
				newend = i[5]
				if start==newstart and end==newend:
					newpos = pos
				else:
					dif = pos-start
					newpos = dif+newstart
					
	if not newchrom:
		return "NA"
	else:
		return (newchrom,newpos)

def R6toR5(poschrom,maplist):
	pos = poschrom[1]
	chrom = poschrom[0]
	newchrom = ""

	for i in maplist:
		if i[3]==chrom:
			if pos>=i[4] and pos<=i[5]:
				newchrom = i[0]
				start = i[4]
				end = i[5]
				newstart = i[1]
				newend = i[2]
				if start==newstart and end==newend:
					newpos = pos
				else:
					dif = pos-start
					newpos = dif+newstart
	if not newchrom:
		return "NA"
	else:
		return (newchrom,newpos)

#this file is generated by "DESTSNPs_MatchingAlgorithm_RegionInversionFreq_bootstrapSamps.py" with a "season" analysis option
matchingSNPfile = "MatchedSNPs_DembeckBastide_DESTSeason_"+chrom+".txt"

keys = []
hitinfodict = {}
matcheddict = {}
keysdict = {}

#read in snp file
with open(matchingSNPfile,"r") as file:
	count = 0
	incount = 0
	for line in file:
		l = line.strip("\n").split("\t")
		if count>0:
			chrompos = R5toR6([l[0],int(l[1])],mapswap)
			keyentry = [l[0],int(l[1]),l[2],l[3],l[4],l[5]]
			sampnum=int(l[6])
			chromposval = R5toR6([l[7],int(l[8])],mapswap)
			value = [l[7],int(l[8]),l[9],l[10]]
			if not chrompos in keys:
				keys.append(chrompos)
				hitinfodict.update({chrompos:keyentry})
				matcheddict.update({(chrompos,sampnum):[chromposval]})
			elif not (chrompos,sampnum) in matcheddict.keys():
				matcheddict.update({(chrompos,sampnum):[chromposval]})
			else:
				mval = matcheddict[(chrompos,sampnum)]
				mval.append(chromposval)
				matcheddict.update({(chrompos,sampnum):mval})
			hitinfodict.update({chromposval:value})

		count+=1

#this file is generated by "DESTSNPs_MatchingAlgorithm_RegionInversionFreq_bootstrapSamps.py" with a "season" analysis option
permgroupfile = "GroupPermutations_MatchedSNPs_DembeckBastide_DESTSeason_"+chrom+".txt"

sampdict = {}
with open(permgroupfile,"r") as file:
	count = 0
	for line in file:
		if count>0:
			l = line.strip("\n").split("\t")
			sampnum = int(l[0])
			chrompos = R5toR6([l[1],int(l[2])],mapswap)
			value = [l[1],int(l[2]),l[3],l[4]]
			if not chrompos in hitinfodict.keys():
				hitinfodict.update({chrompos:value})
			if not sampnum in sampdict.keys():
				sampdict.update({sampnum:[chrompos]})
			else:
				samp = sampdict[sampnum]
				samp.append(chrompos)
				sampdict.update({sampnum:samp})
		count+=1



DESTfile = "DESTdata_"+chrom+"_pooledsampsfreq_LinvillaSeason.txt"

freqdict = {}

#read in DEST files to get frequencies
with open(DESTfile, "r") as file:
	count = 0
	incount = 0
	for line in file:
		l = line.strip("\n").split("\t")
		if count>0:
			testchrpos = (l[0],int(l[1]))
			if testchrpos in hitinfodict.keys():
				info = hitinfodict[testchrpos]
				freqs = []
				if info[2]==l[2] and info[3]==l[3]:
					for samp in pooledsampsID:
						index = pooledsampsdict[samp][-1]
						if l[index]==".":
							freqs.append(l[index])
						else:
							freqs.append(float(l[index]))

					freqdict.update({testchrpos:freqs})

		else:
			for i in l:
				if i in pooledsampsID:
					value = pooledsampsdict[i]
					value.append(incount)
					pooledsampsdict.update({i:value})
				incount+=1
		count+=1

seasondict = {}
countdis=[]
seasondis=[]

#metric calculation
for key in hitinfodict.keys():
	freqs = freqdict[key]
	totalseason = 0
	count=0
	for i in range(0,(len(freqs)-1)):
		samp = pooledsampsID[i]
		sampinfo = pooledsampsdict[samp]
		season = sampinfo[1]

		#only calculates in the spring -> fall direction
		#so looks for ranges where spring & fall values exist
		if season == "spring":
			freq = freqs[i]
			nextsamp = pooledsampsID[i+1]
			nextsampinfo = pooledsampsdict[nextsamp]
			nextfreq = freqs[i+1]
			nextseason = nextsampinfo[1]

			if nextseason == "fall":
				#if both spring & fall are not missing snp, then add spring/fall change to total metric
				if freq!="." and nextfreq!=".":
					dif = nextfreq-freq
					totalseason += dif
					count+=1
	seasondict.update({key:[totalseason,count]})
	countdis.append(count)
	seasondis.append(totalseason)

pers = [10,25,50,75,90]
print(np.percentile(countdis,pers))
print(np.percentile(seasondis,pers))

outputmatchedfile = "DirectionSeason_MatchedSNPs_Individual_"+chrom+".txt"
with open(outputmatchedfile, "w") as wfile:
	wfile.write("HITNAME\tREF\tALT\tTYPE\tSAMPNUM\tMATCHCHROM\tMATCHPOS\tMATCHREF\tMATCHALT\tTOTALSEASON\tCOUNT\tTOTALNORMAL\n")
	for key in keys:
		chrompos = key
		hitinfo = hitinfodict[chrompos]
		wfile.write(str(hitinfo[0])+"_"+str(hitinfo[1])+"\t"+str(hitinfo[2])+"\t"+str(hitinfo[3])+"\t"+"hit"+"\t"+"hit"+"\t"+str(hitinfo[0])+"\t"+str(hitinfo[1])+"\t"+str(hitinfo[2])+"\t"+str(hitinfo[3]))
		seasoninfo = seasondict[key]
		wfile.write("\t"+str(seasoninfo[0])+"\t"+str(seasoninfo[1])+"\t")
		if seasoninfo[1]>0:
			ratio = seasoninfo[0]/seasoninfo[1]
		else:
			ratio = "N/A"
		wfile.write(str(ratio)+"\n")
	for key in matcheddict.keys():
		chrompos = key[0]
		sampnum = key[1]
		hitinfo = hitinfodict[chrompos]
		matchedsamps = matcheddict[key]

		for m in matchedsamps:
			matchinfo = hitinfodict[m]
			seasoninfo = seasondict[m]
			wfile.write(str(hitinfo[0])+"_"+str(hitinfo[1])+"\t"+str(hitinfo[2])+"\t"+str(hitinfo[3])+"\t"+"matched"+"\t"+str(sampnum))
			for i in matchinfo:
				wfile.write("\t"+str(i))
			wfile.write("\t"+str(seasoninfo[0])+"\t"+str(seasoninfo[1]))
			if seasoninfo[1]>0:
				ratio = seasoninfo[0]/seasoninfo[1]
			else:
				ratio = "N/A"
			wfile.write("\t"+str(ratio)+"\n")


outputgroupfile = "DirectionSeason_GroupPermutations_"+chrom+".txt"
with open(outputgroupfile, "w") as wfile:
	wfile.write("SAMPNUM\tCHROM\tPOS\tREF\tALT\tTOTALSEASON\tCOUNT\tTOTALNORMAL\n")
	for sampnum in range(1,1001):
		samp = sampdict[sampnum]
		for s in samp:
			wfile.write(str(sampnum))
			hitinfo = hitinfodict[s]
			seasoninfo = seasondict[s]
			for i in range(0,4):
				wfile.write("\t"+str(hitinfo[i]))
			for i in seasoninfo:
				wfile.write("\t"+str(i))
			if seasoninfo[1]>0:
				ratio = seasoninfo[0]/seasoninfo[1]
			else:
				ratio = "N/A"
			wfile.write("\t"+str(ratio)+"\n")



