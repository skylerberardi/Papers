from ftplib import FTP
import gzip
import re
import sys
import copy
import os
import subprocess
import math
import statistics
import random
import numpy as np
from sklearn.linear_model import LinearRegression

chroms = ["2L","2R","3L","3R","X"]
indexsampdict = {}

samplefile = "SupplementaryFiles/fiveClinalSamps_samplat.txt"

samplelist = []

with open(samplefile, "r") as file:
	count = 0
	incount = 0
	for line in file:
		if count>0:
			l = line.strip("\n").split(" ")
			entry = [l[1],float(l[2])]
			samplelist.append(entry)
			indexsampdict.update({l[1]:[incount]})
			incount+=1
		count+=1



chrom = sys.argv[1]

## This is a series of functions that convert release 5 dmel coordinates to release 6 dmel coordinates and vice versa.
## The file "Schroeder.Dmel_r5-to-r6_map.2014.6.12.txt" is from Flybase

mapfile = "SupplementaryFiles/Schroeder.Dmel_r5-to-r6_map.2014.6.12.txt"
mapswap = []

#reads in map file -- each entry is a region that has been shifted as a block to new release 6 coordinates
#each entry contains, starting at index 0 - rel 5 chromosomal arm, 1 - rel 5 BP start, 2 - rel 5 BP end,
#	3 - rel 6 chromosomal arm, 4 - rel 6 start, 5 - rel 6 end, 6 - rel 6 strand
with open(mapfile) as file:
	for line in file:
		if line.startswith("#"):
			continue
		else:
			l = line.strip("\n").split("\t")
			if l[0] in chroms:
				mapswap.append([l[0],int(l[1]),int(l[2]),l[3],int(l[4]),int(l[5]),l[6]])


#each of these functions checks in which region a SNP is located in either rel 5 or rel 6 coordinates and then
#shifts the given position by the mapping
def R5toR6(poschrom,maplist):
	pos = poschrom[1]
	chrom = poschrom[0]
	newchrom = ""

	for i in maplist:
		if i[0]==chrom:
			if pos>=i[1] and pos<=i[2]:
				newchrom = i[3]
				start = i[1]
				end = i[2]
				newstart = i[4]
				newend = i[5]
				if start==newstart and end==newend:
					newpos = pos
				else:
					dif = pos-start
					newpos = dif+newstart
					
	if not newchrom:
		return "NA"
	else:
		return (newchrom,newpos)

def R6toR5(poschrom,maplist):
	pos = poschrom[1]
	chrom = poschrom[0]
	newchrom = ""

	for i in maplist:
		if i[3]==chrom:
			if pos>=i[4] and pos<=i[5]:
				newchrom = i[0]
				start = i[4]
				end = i[5]
				newstart = i[1]
				newend = i[2]
				if start==newstart and end==newend:
					newpos = pos
				else:
					dif = pos-start
					newpos = dif+newstart
	if not newchrom:
		return "NA"
	else:
		return (newchrom,newpos)



#generated by "DESTSNPs_MatchingAlgorithm_RegionInversionFreq_bootstrapSamps.py" with analysis as "clinal"
matchingSNPfile = "MatchedSNPs_DembeckBastide_DESTClinal_"+chrom+".txt"

keys = []
keysfull = []
hitslist = []
hitinfodict = {}
matcheddict = {}
keyssampnum = {}

#five clinal samples names
pooledsampsID = ["FL_ho_10_spring","GA_at_14_spring", "MA_la_14_spring", "PA_li_14_spring", "VA_ch_14_spring"]

#reading in file & converting release 5 to release 6
with open(matchingSNPfile,"r") as file:
	count = 0
	incount = 0
	for line in file:
		l = line.strip("\n").split("\t")
		if count>0:
			chrompos = R5toR6([l[0],int(l[1])],mapswap)
			keyentry = [l[0],int(l[1]),l[2],l[3],l[4],l[5]]
			chromposval = R5toR6([l[7],int(l[8])],mapswap)
			sampnum = int(l[6])
			value = [l[7],int(l[8]),l[9],l[10]]
			if not chrompos in keys:
				keys.append(chrompos)
				hitslist.append(chrompos)
				hitinfodict.update({chrompos:keyentry})
			if not chromposval in keys:
				keys.append(chromposval)
				hitinfodict.update({chromposval:value})

			if not (chrompos, sampnum) in keysfull:
				keysfull.append((chrompos,sampnum))
				matcheddict.update({(chrompos,sampnum):[chromposval]})
			else:
				mval = matcheddict[(chrompos,sampnum)]
				mval.append(chromposval)
				matcheddict.update({(chrompos,sampnum):mval})

		count+=1



DESTfile = "DESTdata_"+chrom+"_pooledsampsfreq_fivesamps.txt"

freqdict = {}
refsame = 0
altsame = 0
refnot = 0
altnot = 0

#generated by "DESTSNPs_MatchingAlgorithm_RegionInversionFreq_bootstrapSamps.py" with analysis as "clinal"
permfile = "GroupPermutations_MatchedSNPs_DembeckBastide_DESTClinal_" + chrom + ".txt"


sampdict = {}
#reads in the bootstrapped matched SNP samples
with open(permfile, "r") as file:
	count = 0
	for line in file:
		if count>0:
			l = line.strip("\n").split("\t")
			sampnum = int(l[0])
			chrompos = R5toR6([l[1],int(l[2])],mapswap)
			value = [l[1],int(l[2]),l[3],l[4]]
			if sampnum in sampdict.keys():
				samp = sampdict[sampnum]
				samp.append(chrompos)
				sampdict.update({sampnum:samp})
			else:
				sampdict.update({sampnum:[chrompos]})
			if not chrompos in hitinfodict.keys():
				hitinfodict.update({chrompos:value})
				keys.append(chrompos)
		count+=1




#reads in the whole DEST dataset for those five samples
with open(DESTfile, "r") as file:
	count = 0
	for line in file:
		l = line.strip("\n").split("\t")
		if count>0:
			testchrpos = (l[0],int(l[1]))
			if testchrpos in keys and not testchrpos in freqdict.keys():
				info = hitinfodict[testchrpos]
				freqs = []
				if info[2]==l[2] and info[3]==l[3]:
					for samp in pooledsampsID:
						index = indexsampdict[samp][1]
						if l[index]==".":
							freqs.append(l[index])
						else:
							freqs.append(float(l[index]))

					freqdict.update({testchrpos:freqs})

		else:
			for i in l:
				if i in pooledsampsID:
					value = indexsampdict[i]
					value.append(incount)
					indexsampdict.update({i:value})
				incount+=1
		count+=1

lats = []
for s in pooledsampsID:
	index = indexsampdict[s][0]
	lat = samplelist[index][1]
	lats.append(lat)

printlist = []

linearregDict = {}

#calculates coefficient of linear regression for latitude vs frequency for candidate SNPs
for hit in hitslist:
	rel5hit = R6toR5((hit[0],hit[1]),mapswap)
	hitfreqs = freqdict[hit]
	hitname = str(rel5hit[0])+"_"+str(rel5hit[1])
	freqs = []
	samplats = []
	for i in range(0,len(lats)):
		if hitfreqs[i] != ".":
			freqs.append(hitfreqs[i])
			samplats.append(lats[i])
	if len(freqs)<3:
		print(hit)
	x = np.array(samplats).reshape((-1,1))
	y = np.array(freqs)
	model = LinearRegression().fit(x, y)
	r_sq = model.score(x, y)
	linearregDict.update({hit:[float(model.coef_),r_sq]})
	entry = [hitname,"hit","hit",hit[0],hit[1],float(model.coef_),r_sq]
	printlist.append(entry)

#calculates coefficient of linear regression for latitude vs frequency for matched SNPs
for hitsampnum in matcheddict.keys():
	matchedsnps = matcheddict[hitsampnum]
	hit = hitsampnum[0]
	rel5hit = R6toR5((hit[0],hit[1]),mapswap)
	sampnum = hitsampnum[1]
	hitname = str(rel5hit[0])+"_"+str(rel5hit[1])
	for m in matchedsnps:
		if not m in linearregDict.keys():
			sfreqs = freqdict[m]
			freqs = []
			samplats = []
			for i in range(0,len(lats)):
				if sfreqs[i] != ".":
					freqs.append(sfreqs[i])
					samplats.append(lats[i])
			x = np.array(samplats).reshape((-1,1))
			y = np.array(freqs)
			model = LinearRegression().fit(x, y)
			r_sq = model.score(x, y)
			linearregDict.update({m:[float(model.coef_),r_sq]})
			entry = [hitname, "matched",sampnum, m[0], m[1],float(model.coef_),r_sq]
			printlist.append(entry)
		else:
			linreg = linearregDict[m]
			entry = [hitname, "matched",sampnum, m[0], m[1],linreg[0],linreg[1]]
			printlist.append(entry)

for hit in hitinfodict.keys():
	if not hit in linearregDict.keys():
		sfreqs = freqdict[hit]
		freqs = []
		samplats = []
		for i in range(0,len(lats)):
			if sfreqs[i] != ".":
				freqs.append(sfreqs[i])
				samplats.append(lats[i])
		x = np.array(samplats).reshape((-1,1))
		y = np.array(freqs)
		model = LinearRegression().fit(x, y)
		r_sq = model.score(x, y)
		linearregDict.update({hit:[float(model.coef_),r_sq]})

permprint = []

for sampnum in sampdict.keys():
	perm = sampdict[sampnum]
	for p in perm:
		pos = p[1]
		linreg = linearregDict[p]
		entry = [sampnum,chrom,pos,linreg[0],linreg[1]]
		permprint.append(entry)

	
outputfile = "LinearRegressionResults_Clinal_fivesamps_"+chrom+".txt"

with open(outputfile, "w") as wfile:
	wfile.write("HITNAME\tTYPE\tSAMPNUM\tCHROM\tPOS\tSLOPE\tRSQ\n")
	for i in printlist:
		wfile.write(str(i[0]))
		for j in range(1,len(i)):
			wfile.write("\t"+str(i[j]))
		wfile.write("\n")

outputfile = "GroupPermutations_LinearRegressionResults_Clinal_fivesamps_"+chrom+".txt"

with open(outputfile, "w") as wfile:
	wfile.write("SAMPNUM\tCHROM\tPOS\tSLOPE\tRSQ\n")
	for i in permprint:
		wfile.write(str(i[0]))
		for j in range(1,len(i)):
			wfile.write("\t"+str(i[j]))
		wfile.write("\n")


