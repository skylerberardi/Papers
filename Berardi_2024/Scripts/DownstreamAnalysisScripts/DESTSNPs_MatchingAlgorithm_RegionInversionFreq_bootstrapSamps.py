from ftplib import FTP
import gzip
import re
import sys
import copy
import os
import subprocess
import math
import statistics
import random


chroms = ["2L","2R","3L","3R","X"]

##This script reads in information about candidate SNPs (generated by "CandidateSNPs_RegionInversionFreq_(Clinal/Season)Analysis.py")
## and information about all DEST SNPs (generated by "AllDESTSNPs_RegionInversionFreq_(Clinal/Season)Analysis.py"). It randomly selects
## 100 matched SNPs 100 times for each candidate SNP that is located in a similar genetic region, on the same chromosome, with the same inversion
## status, and within a min of 0.01 up to a max of 0.07 in average frequency across DEST samples.

#script takes a chromosomal arm and either "Clinal" or "Season" for analysis type
chrom = sys.argv[1]
analysis = sys.argv[2]

hitsfile = "GWAShits_DembeckBastide_"+analysis+"DEST_ForMatching.txt"
matchingfile = "DESTChrom"+chrom+"_DembeckBastide_"+analysis+"DEST_ForMatching.txt"

hitsdict = {}
hitskeys = []
hitsLowDEST = []

#Minimum number of samples for a SNP to be included in an analysis
if analysis=="Clinal":
	minsamp=3
elif analysis=="Season":
	minsamp=3
else:
	print("not valid analysis type")

#read in candidate snps, and any that are in fewer than the minimum samples are put in the hitsLowDEST list
with open(hitsfile, "r") as file:
	count = 0
	for line in file:
		if count>0:
			l = line.strip("\n").split("\t")
			if l[0] == chrom and l[7] != "N/A":
				entry = (l[0],int(l[1]),l[2],l[3],l[4],l[5])
				value = [l[6],float(l[7]),int(l[8])]
				if int(l[8])>=minsamp:
					if l[9] != "N/A":
						value.append(int(l[9]))
					hitsdict.update({entry:value})
					hitskeys.append((l[0],int(l[1])))
				else:
					hitsLowDEST.append(l)
		count+=1


#read in all DEST SNPs and subset to a pool of possible matched SNPs
DESTlist = []

with open(matchingfile, "r") as file:
	count = 0
	for line in file:
		if count>0:
			l = line.strip("\n").split("\t")
			if l[5] != "N/A":
				entry = [l[0],int(l[1]),l[2],l[3],l[4],float(l[5]),int(l[6])]
				if l[7] != "N/A":
					entry.append(int(l[7]))
				DESTlist.append(entry)
		count+=1

buffer = 50000
wiggle = 0.01

lengthlist = []

matcheddict = {}

def find_sample(hitsdict,hit,wiggle,buffer,DESTlist):
	matchedlist = []
	value = hitsdict[hit]
	pos = hit[1]

	region = value[0]
	freq = value[1]
	lowfreq = freq-wiggle
	highfreq = freq+wiggle

	start = pos-buffer
	if start<0:
		start = 0
	end = pos+buffer

	if len(value)==4:
		inversiondist = value[3]
		if inversiondist == 0:
			inversion = "inside"
		elif inversiondist < 500000:
			inversion = "close"
		else:
			inversion = "far"
	else:
		inversion = "N/A"

	for d in DESTlist:
		if d[0]==chrom and (d[1]<=start or d[1]>=end) and d[6]>=4:
			if not (d[0],int(d[1])) in hitskeys:
				dregion = d[4]
				dfreq = d[5]
				if len(d)>7:
					inversiondist = d[7]
					if inversiondist == 0:
						dinversion = "inside"
					elif inversiondist < 500000:
						dinversion = "close"
					else:
						dinversion = "far"
				else:
					dinversion = "N/A"

				if dregion == region:
					if dfreq>=lowfreq and dfreq<=highfreq:
						if inversion==dinversion:
							matchedlist.append(d)
#start with a possible difference in average frequency of 0.01, increase by 0.01 if the group of possible matched SNPs is less than 200 SNPs
	if len(matchedlist)>=200:
		print(wiggle)
		return(matchedlist)
	else:
		wiggle = wiggle+0.01
		return(find_sample(hitsdict,hit,wiggle,buffer,DESTlist))

#randomly select 100 matched SNPs from the pool of possible matched SNPs 100 times
printlist = []
groupperms = []
for hit in hitsdict.keys():
	samp = find_sample(hitsdict,hit,wiggle,buffer,DESTlist)
	for sampnum in range(1,101):
		perm = random.sample(samp,100)
		key = (hit, sampnum)
		matcheddict.update({key:perm})
	thousand = random.choices(samp,k=1000)
	groupperms.append(thousand)


analysis = sys.argv[2]

outputfile = "CandidateSNPs_DembeckBastide_DEST"+ analysis +"_"+chrom+".txt"

with open(outputfile, "w") as wfile:
	wfile.write("CHROM\tPOS\tREF\tALT\tSNPASSOC\tDATASET\tSAMPNUM\tMATCHCHROM\tMATCHPOS\tMATCHREF\tMATCHALT\n")
	for hit in hitsdict.keys():
		for sampnum in range(1,101):
			key = (hit, sampnum)
			matchedSNPs = matcheddict[key]
			for d in matchedSNPs:
				wfile.write(str(hit[0]))
				for i in range(1, len(hit)):
					wfile.write("\t"+str(hit[i]))
				wfile.write("\t"+str(sampnum))
				for i in range(0,len(d)):
					wfile.write("\t"+str(d[i]))
				wfile.write("\n")

grouppermsfile = "GroupPermutations_MatchedSNPs_DembeckBastide_DEST"+analysis+"_"+chrom+".txt"

with open(grouppermsfile,"w") as wfile:
	wfile.write("SAMPNUM\tCHROM\tPOS\tREF\tALT\tREGION\tAVGFREQ\tNUMDEST\tINVERSIONDIST\n")
	for num in range(0,1000):
		sampnum = num+1
		for p in groupperms:
			wfile.write(str(sampnum))
			snp = p[num]
			for i in snp:
				wfile.write("\t"+str(i))
			if chrom=="X":
				wfile.write("\t"+"N/A")
			wfile.write("\n")
			

hitsexcludedfile = "DembeckBastidehitsExcluded_LowDEST"+analysis+"_"+chrom+".txt"

with open(hitsexcludedfile, "w") as wfile:
	for hit in hitsLowDEST:
		wfile.write(str(hit[0]))
		for i in range(1,len(hit)):
			wfile.write("\t"+str(hit[i]))
		wfile.write("\n")





